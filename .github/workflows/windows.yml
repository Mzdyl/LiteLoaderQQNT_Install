name: Install, Test and Release on Windows

on:
  push:
    paths:
      - 'install_windows.py'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      - 'install_windows.py'
      - '.github/workflows/windows.yml'
  workflow_dispatch:

jobs:
  install_test_and_release:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9  # 指定 Python 3 版本

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download External Data Release
      run: |
        curl -L -o LiteLoaderQQNT.zip https://github.com/LiteLoaderQQNT/LiteLoaderQQNT/releases/latest/download/LiteLoaderQQNT.zip
        curl -L -o list-viewer.zip https://github.com/ltxhhz/LL-plugin-list-viewer/releases/latest/download/list-viewer.zip

    - name: Install pyinstaller & Build install_windows_pyinstaller.exe
      run: |
        python -m pip install pyinstaller
        pyinstaller --onefile --uac-admin --add-data "LiteLoaderQQNT.zip:." --add-data "list-viewer.zip:." install_windows.py -n install_windows_pyinstaller

    - name: Upload install_windows_pyinstaller.exe
      uses: actions/upload-artifact@v4
      with:
        name: install_windows_pyinstaller
        path: dist/install_windows_pyinstaller.exe

    - name: Download and Install QQ Software
      run: |
        # Download QQ software
        python get_qqnt.py Windowsx64
        # Install QQ silently
        Start-Process -FilePath QQInstaller.exe -ArgumentList '/S' -Wait

    - name: Run install_windows_pyinstaller.exe
      run: |
        .\dist\install_windows_pyinstaller.exe

    - name: Run QQ with logging
      run: |
        start "C:\Program Files\Tencent\QQNT\QQ" --enable-logging

    - name: Check if LiteLoader plugins folder exists
      run: |
        if (Test-Path "C:\Program Files\Tencent\QQNT\resources\app\LiteLoaderQQNT-main\data\LiteLoader") {
          Write-Host "LiteLoader plugins folder found. Test passed."
        } else {
          Write-Host "LiteLoader plugins folder not found. Test failed."
          exit 1
        }

    - name: Delete LiteLoaderQQNT-main directory
      run: |
        # 检查目录是否存在
        if (Test-Path "C:\Program Files\Tencent\QQNT\resources\app\LiteLoaderQQNT-main") {
          # 删除目录
          Remove-Item -Recurse -Force "C:\Program Files\Tencent\QQNT\resources\app\LiteLoaderQQNT-main"
          Write-Output "Deleted: C:\Program Files\Tencent\QQNT\resources\app\LiteLoaderQQNT-main"
        } else {
          Write-Output "Directory does not exist."
        }
      shell: pwsh

    - name: Block GitHub access by modifying hosts file
      run: |
        echo 127.0.0.1 github.com | Out-File -Append -FilePath C:\Windows\System32\drivers\etc\hosts -Encoding ASCII
        echo 127.0.0.1 api.github.com | Out-File -Append -FilePath C:\Windows\System32\drivers\etc\hosts -Encoding ASCII

    - name: ReRun install_windows_pyinstaller.exe
      run: |
        .\dist\install_windows_pyinstaller.exe

    - name: Run QQ with logging
      run: |
        start "C:\Program Files\Tencent\QQNT\QQ" --enable-logging

    - name: Check if LiteLoader plugins folder exists
      run: |
        if (Test-Path "C:\Program Files\Tencent\QQNT\resources\app\LiteLoaderQQNT-main\data\LiteLoader") {
          Write-Host "LiteLoader plugins folder found. Test passed."
        } else {
          Write-Host "LiteLoader plugins folder not found. Test failed."
          exit 1
        }

    - name: Create release body
      if: github.event_name == 'push'
      id: create_release_body
      run: |
        echo "Recent Commits:" > release_body.txt
        git log -5 --pretty=format:'%h - %s' >> release_body.txt

    - name: Check if release exists
      if: github.event_name == 'push'
      id: check_release
      run: |
        if (gh release view "pro-release" > $null) {
          echo "::set-output name=release_exists::true"
        } else {
          echo "::set-output name=release_exists::false"
        }
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}

    - name: Get existing release body
      if: github.event_name == 'push'
      id: get_existing_body
      run: |
        gh release view "pro-release" --json body --jq .body > existing_body.txt
      env:
        GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}

    - name: Combine release body
      if: github.event_name == 'push'
      run: |
        Get-Content existing_body.txt | Add-Content release_body.txt

    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: pro-release
        draft: false
        prerelease: true
        body_path: release_body.txt
        files: |
          dist/install_windows_pyinstaller.exe
      env:
        GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}
