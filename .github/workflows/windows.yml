name: Install and Test LL on Windows

on:
  push:
    paths:
      - 'install_windows.py'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      - 'install_windows.py'
      - '.github/workflows/windows.yml'
  workflow_dispatch:

jobs:
  install_and_test:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9  # 指定 Python 3 版本

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install pyinstaller & Build install_windows_pyinstaller.exe
      run: |
        python3 -m pip install pyinstaller
        pyinstaller --onefile --uac-admin install_windows.py -n install_windows_pyinstaller

    - name: Upload install_windows_pyinstaller.exe
      uses: actions/upload-artifact@v4
      with:
        name: install_windows_pyinstaller
        path: dist/install_windows_pyinstaller.exe

    - name: Download and Install QQ Software
      run: |
        # Download QQ software
        python3 get_qqnt.py Windowsx64
        # Install QQ silently
        Start-Process -FilePath QQInstaller.exe -ArgumentList '/S' -Wait

    - name: Run install_windows_pyinstaller.exe
      run: |
        .\dist\install_windows_pyinstaller.exe

    - name: Run QQ with logging
      run: |
        start "C:\Program Files\Tencent\QQNT\QQ" --enable-logging 

    - name: Check if LiteLoader plugins folder exists
      run: |
        if (Test-Path "C:\Program Files\Tencent\QQNT\resources\app\LiteLoaderQQNT-main\plugins") {
          Write-Host "LiteLoader plugins folder found. Test passed."
        } else {
          Write-Host "LiteLoader plugins folder not found. Test failed."
          exit 1
        }

  release:
    runs-on: ubuntu-latest
    needs: install_and_test
#    if: github.event_name == 'push' && github.ref == 'refs/tags/pro-release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get recent commit messages
        id: get_commit_messages
        run: echo "::set-output name=commit_messages::$(git log -5 --pretty=format:'%h - %s')"

      - name: Create release body
        id: create_release_body
        run: |
          echo "Recent Commits:" >> release_body.txt
          echo "${{ steps.get_commit_messages.outputs.commit_messages }}" >> release_body.txt
        shell: bash

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "pro-release" > /dev/null 2>&1; then
            echo "::set-output name=release_exists::true"
          else
            echo "::set-output name=release_exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}

      - name: Get existing release body
        if: steps.check_release.outputs.release_exists == 'true'
        id: get_existing_body
        run: |
          gh release view "pro-release" --json body --jq .body > existing_body.txt
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}

      - name: Combine release body
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          cat existing_body.txt >> release_body.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pro-release
          draft: false
          prerelease: true
          body_path: release_body.txt
          files: |
            dist/install_windows_pyinstaller.exe
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}
