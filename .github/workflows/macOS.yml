name: Install and Test LL on macOS

on:
  push:
    paths:
      - 'install.sh'
      - '.github/workflows/macOS.yml'
  pull_request:
    paths:
      - 'install.sh'
      - '.github/workflows/macOS.yml'
  workflow_dispatch:

jobs:
  install_and_test:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9  # 指定 Python 3 版本

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download and Install QQ Software
      run: |
        python3 get_qqnt.py Macos
        hdiutil attach QQ.dmg
        cp -R /Volumes/QQ/QQ.app /Applications
        hdiutil detach /Volumes/QQ
        open /Applications/QQ.app/ &
                                
    - name: Run install.sh
      run: |
        chmod +x install.sh
        ./install.sh
        
    - name: Run QQ on macOS, wait, and check LiteLoader
      run: |
        /Applications/QQ.app/Contents/MacOS/QQ &  # 启动 QQ，放入后台
        sleep 3  # 等待 3 秒

        # 关闭 QQ 应用程序，这里使用 pkill 假设 QQ 进程的名字为 QQ
        pkill QQ

        # 检查 LiteLoader 插件是否存在
        if [ -d "$HOME/Library/Containers/com.tencent.qq/Data/Documents/LiteLoader/plugins" ]; then
          echo "LiteLoader plugins folder exists. Test succeeded."
        else
          echo "LiteLoader plugins folder does not exist. Test failed."
          exit 1
        fi

    - name: Set up iptables rules
      run: |
        # 阻止访问 GitHub
        echo "127.0.0.1 github.com" | sudo tee -a /etc/hosts
        echo "127.0.0.1 api.github.com" | sudo tee -a /etc/hosts

    - name: Remove LiteLoader directory
      run: |
        if [ -d "$HOME/Library/Containers/com.tencent.qq/Data/Documents/LiteLoader" ]; then
          # 删除目录及其内容
          rm -rf "$HOME/Library/Containers/com.tencent.qq/Data/Documents/LiteLoader"
          echo "LiteLoader directory removed successfully."
        else
          echo "LiteLoader directory does not exist."
        fi

    - name: ReRun install.sh
      run: |
        ./install.sh

    - name: Check LiteLoader
      run: |
        /Applications/QQ.app/Contents/MacOS/QQ &  # 启动 QQ，放入后台
        sleep 3  # 等待 3 秒

        # 关闭 QQ 应用程序，这里使用 pkill 假设 QQ 进程的名字为 QQ
        pkill QQ

        # 检查 LiteLoader 插件是否存在
        if [ -d "$HOME/Library/Containers/com.tencent.qq/Data/Documents/LiteLoader/plugins" ]; then
          echo "LiteLoader plugins folder exists. Test succeeded."
        else
          echo "LiteLoader plugins folder does not exist. Test failed."
          exit 1
        fi

  release:
    runs-on: ubuntu-latest
    needs: install_and_test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get recent commit messages
        id: get_commit_messages
        run: echo "::set-output name=commit_messages::$(git log -5 --pretty=format:'%h - %s')"

      - name: Create release body
        id: create_release_body
        run: |
          echo "Recent Commits:" >> release_body.txt
          echo "${{ steps.get_commit_messages.outputs.commit_messages }}" >> release_body.txt
        shell: bash

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "pro-release" > /dev/null 2>&1; then
            echo "::set-output name=release_exists::true"
          else
            echo "::set-output name=release_exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}

      - name: Get existing release body
        if: steps.check_release.outputs.release_exists == 'true'
        id: get_existing_body
        run: |
          gh release view "pro-release" --json body --jq .body > existing_body.txt
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}

      - name: Combine release body
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          cat existing_body.txt >> release_body.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pro-release
          draft: false
          prerelease: true
          body_path: release_body.txt
          files: |
            install_mac.sh
            install.sh
        env:
          GITHUB_TOKEN: ${{ secrets.AC_TOKEN }}
